{
  
    
        "post0": {
            "title": "Comparison-based Lower Bounds for Sorting",
            "content": "The Big question . When we look back and figure out that, all the comprassion based sorting algorithms such as . Insertion Sort | Mergesort | Bubble sort | Quick sort | Selection sort etc., | . Best Case Perfomance Worst Case Perfomance . Insertion Sort | $O(n)$ comprisions, $O(1)$ swaps | $O(n^2)$ comprisions and $O(1)$ swaps | . Merge Sort | $O(n log n)$ | $O(n log n)$ | . Bubble Sort | $O(n)$ comparisons, ${ displaystyle O(1)}$ swaps | $O(n^{2})$ comparisons, ${ displaystyle O(n^{2})}$ swaps | . Quick Sort | $O(n log n)$ | $O(n^2)$ | . Selection Sort | $О(n^2)$ comparisons, $О(n)$ swaps | $O(n^2)$ comparisons, $О(n)$ swaps | . There is no comprasion based sorting algorithm with time complexity less than $O(nlogn)$ in worst case. So what would be the lower bound of the comparsion based sorting algorithms . Solving . Imagine we have three elements $a_1, a_2, a_3$ in which $a_i ne a_i$ and we are supposed to sort them in ascending order, The possible solutions would be . $a_1, a_2, a_3$ | $a_1, a_3, a_2$ | $a_2, a_1, a_3$ | $a_2, a_3, a_1$ | $a_3, a_1, a_2$ | $a_3, a_2, a_1$ | . The possible ascending order would be one among these 6. Which means the number of outcomes is $n!$.The Number of ways we can arrange n elements in $n!$ . . Note: 1. N elements give $N!$ arrangements . Let&#39;s assume an abstract approach of a comparison-based sorting algorithm using a Binary Decision tree, . . The possible arrangements of the three elements are the leaf nodes of the Binary Decision Tree. From this, we can say that the number of possible arrangements of n elements is equal to the number of leaf nodes in a binary decision tree. . Note: 2. # Leaf Nodes = # arrangements of n elements N! . Now, let&#39;s look into the hight of the tree. At each level of the tree we are making a decision, which means the height of the tree at a particular leaf will tell us the number of comparisons we made to reach that arrangement. . . Note: 3. hight of the tree = # comparisons we made . . From the Full binary tree above we can say that the number of leaf nodes of this tree is $2^{height}$ and there is no possibility that the leaf nodes can more than $2^{height}$ . Note: 3. Maximum Number of Leaf Nodes in a Binary tree = $2^{height}$ . Now, if we were given a binary decision tree for performing sorting which has $n!$[ref: Note2] leaf nodes, from the Note3, we can say that. . If h is the height of the Binary Decision tree that we are building for sorting n elements then, . $$2^{h} geq n! $$ . As the log is a monotonic function, we can apply log on both sides, . $$h ge log(n!)$$ . Now, we can calculate the h value which is the height, in return, we can figure out the comparison, from the asymptotic equations of growth of functions we know that, . $$log(n!) = theta(nlogn)$$ $$log(n!) = Omega(nlogn)$$ . Tip: Understand how $log(n!) = theta(nlogn)$ from this Video using the above equations, we can say . $$h = Omega(nlogn)$$ . Which means, the height of the binary decision tree for sorting n elements is lower bounded by $nlogn$, In which height is the number of comparisons we have to make. . From this we can say: . Note: #Comparision we have to make = $ Omega(nlogn)$ The Number of comparisions is lower bounded by $nlogn$. . . Important: From this, we can conclude that no matter of any comparison-based algorithms, we are bounded by the fact that the worst-case time complexity is lower bounded by $nlogn$. It means, we can not have a comparison-based algorithm which can perform better than $nlogn$ .",
            "url": "https://tejakummarikuntla.github.io/notes/algorithms/2020/04/28/Comparison-based-Lower-Bounds-for-Sorting.html",
            "relUrl": "/algorithms/2020/04/28/Comparison-based-Lower-Bounds-for-Sorting.html",
            "date": " • Apr 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "US Adult Income",
            "content": "Dataset of adult income &lt;/br&gt; DataSet Overveiw . Each row is labelled as either having a salary greater than &quot;&gt;50K&quot; or &quot;&lt;=50K&quot;. | This Data set is split into two CSV files, named adult-training.csv and adult-test.csv. &lt;/br&gt; To Build a binary classifier on the training dataset to predict the column income_bracket which has two possible values &quot;&gt;50K&quot; and &quot;&lt;=50K&quot; and evaluate the accuracy of the classifier with the test dataset. | categorical_columns = [workclass, education, marital_status, occupation, relationship, race, gender, native_country] | continuous_columns = [age, education_num, capital_gain, capital_loss, hours_per_week] | A set of reasonably clean records was extracted using the following conditions: ((AAGE&gt;16) &amp;&amp; (AGI&gt;100) &amp;&amp; (AFNLWGT&gt;1)&amp;&amp; (HRSWK&gt;0)) | . Prediction task is to determine whether a person makes over 50K a year. . Dataset Source: https://archive.ics.uci.edu/ml/datasets/census+income, http://mlr.cs.umass.edu/ml/machine-learning-databases/adult/ | . import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np import warnings warnings.filterwarnings(&quot;ignore&quot;) %matplotlib inline train_file = &quot;adult-training.csv&quot; columns = [&#39;Age&#39;,&#39;Workclass&#39;,&#39;fnlgwt&#39;,&#39;Education&#39;,&#39;Education_num&#39;,&#39;Marital_Status&#39;, &#39;Occupation&#39;,&#39;Relationship&#39;,&#39;Race&#39;,&#39;Sex&#39;,&#39;Capital_Gain&#39;,&#39;Capital_Loss&#39;, &#39;Hours/Week&#39;,&#39;Native_country&#39;,&#39;Income&#39;] . #collapse-hide train = pd.read_csv(train_file, names=columns) train.head() . . Age Workclass fnlgwt Education Education_num Marital_Status Occupation Relationship Race Sex Capital_Gain Capital_Loss Hours/Week Native_country Income . 0 39 | State-gov | 77516 | Bachelors | 13 | Never-married | Adm-clerical | Not-in-family | White | Male | 2174 | 0 | 40 | United-States | &lt;=50K | . 1 50 | Self-emp-not-inc | 83311 | Bachelors | 13 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0 | 0 | 13 | United-States | &lt;=50K | . 2 38 | Private | 215646 | HS-grad | 9 | Divorced | Handlers-cleaners | Not-in-family | White | Male | 0 | 0 | 40 | United-States | &lt;=50K | . 3 53 | Private | 234721 | 11th | 7 | Married-civ-spouse | Handlers-cleaners | Husband | Black | Male | 0 | 0 | 40 | United-States | &lt;=50K | . 4 28 | Private | 338409 | Bachelors | 13 | Married-civ-spouse | Prof-specialty | Wife | Black | Female | 0 | 0 | 40 | Cuba | &lt;=50K | . train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 32561 entries, 0 to 32560 Data columns (total 15 columns): # Column Non-Null Count Dtype -- -- 0 Age 32561 non-null int64 1 Workclass 32561 non-null object 2 fnlgwt 32561 non-null int64 3 Education 32561 non-null object 4 Education_num 32561 non-null int64 5 Marital_Status 32561 non-null object 6 Occupation 32561 non-null object 7 Relationship 32561 non-null object 8 Race 32561 non-null object 9 Sex 32561 non-null object 10 Capital_Gain 32561 non-null int64 11 Capital_Loss 32561 non-null int64 12 Hours/Week 32561 non-null int64 13 Native_country 32561 non-null object 14 Income 32561 non-null object dtypes: int64(6), object(9) memory usage: 3.7+ MB . train.shape . (32561, 15) . train.describe() . Age fnlgwt Education_num Capital_Gain Capital_Loss Hours/Week . count 32561.000000 | 3.256100e+04 | 32561.000000 | 32561.000000 | 32561.000000 | 32561.000000 | . mean 38.581647 | 1.897784e+05 | 10.080679 | 1077.648844 | 87.303830 | 40.437456 | . std 13.640433 | 1.055500e+05 | 2.572720 | 7385.292085 | 402.960219 | 12.347429 | . min 17.000000 | 1.228500e+04 | 1.000000 | 0.000000 | 0.000000 | 1.000000 | . 25% 28.000000 | 1.178270e+05 | 9.000000 | 0.000000 | 0.000000 | 40.000000 | . 50% 37.000000 | 1.783560e+05 | 10.000000 | 0.000000 | 0.000000 | 40.000000 | . 75% 48.000000 | 2.370510e+05 | 12.000000 | 0.000000 | 0.000000 | 45.000000 | . max 90.000000 | 1.484705e+06 | 16.000000 | 99999.000000 | 4356.000000 | 99.000000 | . # Replacing &#39;?&#39; with nan train.replace(&#39; ?&#39;, np.nan, inplace=True) . train.isnull().sum() . Age 0 Workclass 1836 fnlgwt 0 Education 0 Education_num 0 Marital_Status 0 Occupation 1843 Relationship 0 Race 0 Sex 0 Capital_Gain 0 Capital_Loss 0 Hours/Week 0 Native_country 583 Income 0 dtype: int64 . Missing Data: . Workclass(1836), Occupation(1843), Native_country(583) &lt;/br&gt; . Important: All the missing data belongs to Categorical data . train[&#39;Income&#39;].value_counts() . &lt;=50K 24720 &gt;50K 7841 Name: Income, dtype: int64 . sns.countplot(train[&#39;Income&#39;]) plt.title(&quot;Count of Income Category&quot;) plt.show() . . Warning: Dataset is Imbalenced with Majority class label &lt;=50k. - 75.91% data points labeled &lt;=50k . 24.08% data points labeled &lt;50k | . # Gender distribution sns.countplot(train[&#39;Sex&#39;]) plt.title(&quot;Count of Sex Category&quot;) plt.show() . sns.stripplot(x=&#39;Sex&#39;, y=&#39;Hours/Week&#39;, data=train,hue=&#39;Income&#39;,marker=&#39;X&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19ac5a67ec8&gt; . # Workclass wclass_plot = sns.countplot(train[&#39;Workclass&#39;]) wclass_plot.set_xticklabels( wclass_plot.get_xticklabels(),rotation=50, ha=&quot;right&quot;) plt.title(&quot;Count Plot of Workclass&quot;) . Text(0.5, 1.0, &#39;Count Plot of Workclass&#39;) . Private class working people are overall High in count . train[&#39;Education&#39;].value_counts() . HS-grad 10501 Some-college 7291 Bachelors 5355 Masters 1723 Assoc-voc 1382 11th 1175 Assoc-acdm 1067 10th 933 7th-8th 646 Prof-school 576 9th 514 12th 433 Doctorate 413 5th-6th 333 1st-4th 168 Preschool 51 Name: Education, dtype: int64 . # Occupation occ_plot = sns.countplot(train[&#39;Occupation&#39;]) occ_plot.set_xticklabels(occ_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) plt.title(&quot;Count Plot of Occupation&quot;) . Text(0.5, 1.0, &#39;Count Plot of Occupation&#39;) . fig, axs = plt.subplots(ncols=2, nrows=4, figsize=(20, 20)) plt.subplots_adjust(hspace=0.68) fig.delaxes(axs[3][1]) fig.suptitle(&#39;Subplot of Various Categorical Variables&#39;) # Workclass wc_plot = sns.countplot(train[&#39;Workclass&#39;], ax=axs[0][0]) wc_plot.set_xticklabels(wc_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) axs[0][0].title.set_text(&#39;Count Plot of Workclass&#39;) # Native country nc_plot = sns.countplot(train[&#39;Native_country&#39;], ax=axs[0][1]) nc_plot.set_xticklabels(nc_plot.get_xticklabels(), rotation=72, ha=&quot;right&quot;) axs[0][1].title.set_text(&#39;Count plot of Native_country&#39;) # Education ed_plot = sns.countplot(train[&#39;Education&#39;], ax=axs[1][0]) ed_plot.set_xticklabels(ed_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) axs[1][0].title.set_text(&#39;Count Plot of Education&#39;) # Marital status ms_plot = sns.countplot(train[&#39;Marital_Status&#39;], ax=axs[1][1]) ms_plot.set_xticklabels(ms_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) axs[1][1].title.set_text(&#39;Count Plot of Martial Status&#39;) # Relationship rel_plot = sns.countplot(train[&#39;Relationship&#39;], ax=axs[2][0]) rel_plot.set_xticklabels(rel_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) axs[2][0].title.set_text(&#39;Count Plot of Relationship&#39;) # Race race_plot = sns.countplot(train[&#39;Race&#39;], ax=axs[2][1]) race_plot.set_xticklabels(race_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) axs[2][1].title.set_text(&#39;Count Plot of Race&#39;) # Occupation occ_plot = sns.countplot(train[&#39;Occupation&#39;], ax=axs[3][0]) occ_plot.set_xticklabels(occ_plot.get_xticklabels(), rotation=40, ha=&quot;right&quot;) axs[3][0].title.set_text(&#39;Count Plot of Occupation&#39;) . . Note: #### Majority count aggrigation in each column: - Workclass: . - Private : 22696 . Native_country: United-States : 29170 | . | Education: Hs-grad : 10501 | . | Marital_Status: Married-civ-spouse : 14976 | . | Relationship Husband : 13193 | . | Race White : 27816 | . | Occupation: Prof-specialty : 4140 | . | . . Note: #### Minority count aggrigation in each column: - Workclass: . - Never-worked : 7 . Native_country: Holand-Netherlands : 1 | . | Education: Preschool : 51 | . | Marital_Status: Married-AF-spouse : 23 | . | Relationship Other-relative : 981 | . | Race: other : 271 | . | Occupation: Armed-Forces : 9 | . | . plt.figure(figsize=(20, 6)) sns.countplot(train[&#39;Marital_Status&#39;], hue=train[&#39;Income&#39;]) plt.title(&quot;Count Plot of Maritial Status with Hue Income&quot;) . Text(0.5, 1.0, &#39;Count Plot of Maritial Status with Hue Income&#39;) . Most of the Never Married people are under Income of &lt;=50k . plt.figure(figsize=(20, 6)) sns.countplot(train[&#39;Relationship&#39;], hue=train[&#39;Income&#39;]) plt.title(&quot;Count Plot of Relationship with Hue Income&quot;) . Text(0.5, 1.0, &#39;Count Plot of Relationship with Hue Income&#39;) . plt.figure(figsize=(20, 6)) sns.countplot(train[&#39;Age&#39;], hue=train[&#39;Income&#39;]) plt.title(&quot;Count Plot of Age with Hue Income&quot;) . Text(0.5, 1.0, &#39;Count Plot of Age with Hue Income&#39;) . sns.set_style(&quot;whitegrid&quot;) sns.pairplot(train, hue=&quot;Income&quot;, size=3) plt.show() . #collapse-hide # Age with Income sns.FacetGrid(train, hue=&quot;Income&quot;, size=6) .map(sns.distplot, &quot;Age&quot;) .add_legend(); plt.show(); # Education_num with Education_num sns.FacetGrid(train, hue=&quot;Income&quot;, size=6) .map(sns.distplot, &quot;Education_num&quot;) .add_legend(); plt.show(); # Education_num with Capital_Gain sns.FacetGrid(train, hue=&quot;Income&quot;, size=7) .map(sns.distplot, &quot;Capital_Gain&quot;) .add_legend(); plt.show(); # Education_num with Capital_Loss sns.FacetGrid(train, hue=&quot;Income&quot;, size=7) .map(sns.distplot, &quot;Capital_Loss&quot;) .add_legend(); plt.show(); # Education_num with Hours/Week sns.FacetGrid(train, hue=&quot;Income&quot;, size=7) .map(sns.distplot, &quot;Hours/Week&quot;) .add_legend(); plt.show(); . . [Report]Univariate Analysis . Dataset is Imbalenced with Majority class label &lt;=50k. . 75.91% data points labeled &lt;=50k | 24.08% data points labeled &lt;50k | . Missing Data: . Workclass(1836), Occupation(1843), Native_country(583) &lt;/br&gt; All belongs to Categorical data . Workclass Majority: Private Class, 22696 | . | Minority: Never-worked, 7 | Without-pay, 14 | Federal-gov, 960 | . | . | Native Country Majority: United-States, 29170 | . | Minority: Holand-Netherlands, 1 | Scotland, 12 | . | Missing Data: ?, 583 | . | . | Education Majority: HS-grad, 10501 | Some-college, 7291 | Bachelors, 5355 | . | Minority: Preschool, 51 | 1st-4th, 168 | 5th-6th, 333 | . | . | Martial Status Majority: Married-civ-spouse, 14976 | Never-married, 10683 | Divorced, 4443 | . | Minority: Married-AF-spouse, 23 | Married-spouse-absent, 418 | . | . | Relationship Majority: Husband, 13193 | Not-in-family, 8305 | . | Minority: Other-relative, 981 | Wife, 1568 | . | . | Race Majority: White, 27816 | Black, 3124 | . | Minority: Other, 271 | Amer-Indian-Eskimo, 311 | . | . | Occupation Majority: Prof-specialty, 4140 | Craft-repair, 4099 | Exec-managerial, 4066 | . | Minority: Armed-Forces, 9 | Priv-house-serv, 149 | Protective-serv, 649 | . | Missing Data: ?, 1843 | . | . | Majority count aggrigation in each column: . Workclass: Private : 22696 | . | Native_country: United-States : 29170 | . | Education: Hs-grad : 10501 | . | Marital_Status: Married-civ-spouse : 14976 | . | Relationship Husband : 13193 | . | Race White : 27816 | . | Occupation: Prof-specialty : 4140 | . | . Minority count aggrigation in each column: . Workclass: Never-worked : 7 | . | Native_country: Holand-Netherlands : 1 | . | Education: Preschool : 51 | . | Marital_Status: Married-AF-spouse : 23 | . | Relationship Other-relative : 981 | . | Race: other : 271 | . | Occupation: Armed-Forces : 9 | . | . train_df = pd.read_csv(&quot;adult-training.csv&quot;, names=columns) # Repalcing &#39;?&#39; to nan #train_df.replace(&#39; ?&#39;, np.nan, inplace=True) . Bivariate Analysis . Questions: . Which workclass people are earning the most? | Which level of educated people are earning the most? | Which martial category people are earning the most? | people form which occupation category are earning the most? | People form wich relation category are earning the most? | Which gender people are earning the most? | Which Race of people are earning the most? | People belongs to which Native country are earning the most? | . Income . changing Income into 0&#39;s and 1&#39;s . train_df[&#39;Income&#39;] = train[&#39;Income&#39;].apply(lambda x: 1 if x==&#39; &gt;50K&#39; else 0) . Workclass . Replaceing NaNs with 0s . train_df[&#39;Workclass&#39;].fillna(&#39; 0&#39;, inplace=True) . sns.factorplot(x=&quot;Workclass&quot;, y=&quot;Income&quot;, data=train_df, kind=&quot;bar&quot;, size = 6, palette = &quot;muted&quot;) plt.xticks(rotation=45); plt.title(&quot;Bar plot of Work Class VS Income&quot;) . Text(0.5, 1, &#39;Bar plot of Work Class VS Income&#39;) . People from Self-emp-inc are earning the most . Education . sns.factorplot(x=&quot;Education&quot;,y=&quot;Income&quot;,data=train_df,kind=&quot;bar&quot;, size = 7, palette = &quot;muted&quot;) plt.xticks(rotation=60); plt.title(&quot;Bar plot of Education VS Income&quot;) . Text(0.5, 1, &#39;Bar plot of Education VS Income&#39;) . All the Grade Education can be combined in to Primary as a single feature &lt;/br&gt; ref: https://www.kaggle.com/kost13/us-income-logistic-regression/comments . def primary(x): if x in [&#39; 1st-4th&#39;, &#39; 5th-6th&#39;, &#39; 7th-8th&#39;, &#39; 9th&#39;, &#39; 10th&#39;, &#39; 11th&#39;, &#39; 12th&#39;]: return &#39; Primary&#39; else: return x . train_df[&#39;Education&#39;] = train_df[&#39;Education&#39;].apply(primary) . sns.factorplot(x=&quot;Education&quot;, y=&quot;Income&quot;, data=train_df, kind=&quot;bar&quot;, size=7, palette=&quot;muted&quot;) plt.xticks(rotation=60); . Combinded [&#39; 1st-4th&#39;, &#39; 5th-6th&#39;, &#39; 7th-8th&#39;, &#39; 9th&#39;, &#39; 10th&#39;, &#39; 11th&#39;, &#39; 12th&#39;] to single feature Primary . Doctorates and Prof-school people has Hihger Income &gt;50k | . Education num . sns.factorplot(x=&quot;Education_num&quot;,y=&quot;Income&quot;,data=train_df,kind=&quot;bar&quot;, size = 6, palette = &quot;muted&quot;) plt.xticks(rotation=60); plt.title(&quot;Factorplot of Education VS Income&quot;) . Text(0.5, 1, &#39;Factorplot of Education VS Income&#39;) . Relation Higher the Education_num give better Income . Martial Status . sns.factorplot(x=&quot;Marital_Status&quot;,y=&quot;Income&quot;,data=train_df,kind=&quot;bar&quot;, size = 5, palette = &quot;muted&quot;) plt.xticks(rotation=60); print(train_df[&#39;Marital_Status&#39;].value_counts()) plt.title(&quot;Factor plot of Martial Status VS Income&quot;) . Married-civ-spouse 14976 Never-married 10683 Divorced 4443 Separated 1025 Widowed 993 Married-spouse-absent 418 Married-AF-spouse 23 Name: Marital_Status, dtype: int64 . Text(0.5, 1, &#39;Factor plot of Martial Status VS Income&#39;) . People belonging to Married-civ-spouse are earning the most. . Occupation . #filing NaNs in Occupation with 0 train_df[&#39;Occupation&#39;].replace(&#39; ?&#39;, &#39; 0&#39;, inplace=True) . train_df[&#39;Occupation&#39;].value_counts() . Prof-specialty 4140 Craft-repair 4099 Exec-managerial 4066 Adm-clerical 3770 Sales 3650 Other-service 3295 Machine-op-inspct 2002 0 1843 Transport-moving 1597 Handlers-cleaners 1370 Farming-fishing 994 Tech-support 928 Protective-serv 649 Priv-house-serv 149 Armed-Forces 9 Name: Occupation, dtype: int64 . sns.factorplot(x=&quot;Occupation&quot;,y=&quot;Income&quot;,data=train_df,kind=&quot;bar&quot;, size = 8, palette = &quot;muted&quot;) plt.xticks(rotation=60); plt.title(&quot;Factor plot of Occupation VS Income&quot;) . Text(0.5, 1, &#39;Factor plot of Occupation VS Income&#39;) . people belonging to Exec-managerial occupation are earning the most . Relationship . sns.factorplot(x=&quot;Relationship&quot;, y=&quot;Income&quot;, data=train_df, size=5, kind=&quot;bar&quot;, palette=&quot;muted&quot;) plt.xticks(rotation=60) plt.title(&quot;Factorplot of Relationship vs Income&quot;) print(train_df[&#39;Relationship&#39;].value_counts()) . Husband 13193 Not-in-family 8305 Own-child 5068 Unmarried 3446 Wife 1568 Other-relative 981 Name: Relationship, dtype: int64 . People belonging to wife category of relationship are earning the most . Race . sns.factorplot(x=&quot;Race&quot;, y=&quot;Income&quot;, data=train_df, size=5, kind=&quot;bar&quot;, palette=&quot;muted&quot;) plt.xticks(rotation=60) plt.title(&quot;Factorplot of Race VS Income&quot;) print(train_df[&#39;Race&#39;].value_counts()) . White 27816 Black 3124 Asian-Pac-Islander 1039 Amer-Indian-Eskimo 311 Other 271 Name: Race, dtype: int64 . People belonging to Asian-Pac-Islander are earning the most in Race . sex . sns.factorplot(x=&quot;Sex&quot;, y=&quot;Income&quot;, data=train_df,size=5,kind=&quot;bar&quot;, palette=&quot;muted&quot;) plt.xticks(rotation=60) plt.title(&quot;Factorplot of Sex VS Income&quot;) print(train_df[&#39;Sex&#39;].value_counts()) . Male 21790 Female 10771 Name: Sex, dtype: int64 . Male gender are earning the most . Native country . There Exist 583 Unknown values replacing with 0 . train_df[&#39;Native_country&#39;].replace(&#39; ?&#39;, &#39; 0&#39;, inplace=True) . #collapse-hide sns.factorplot(x=&quot;Native_country&quot;, y=&quot;Income&quot;, data=train_df,size=13,kind=&quot;bar&quot;, palette=&quot;muted&quot;) plt.xticks(rotation=80) print(train_df[&#39;Native_country&#39;].value_counts()) . . United-States 29170 Mexico 643 0 583 Philippines 198 Germany 137 Canada 121 Puerto-Rico 114 El-Salvador 106 India 100 Cuba 95 England 90 Jamaica 81 South 80 China 75 Italy 73 Dominican-Republic 70 Vietnam 67 Guatemala 64 Japan 62 Poland 60 Columbia 59 Taiwan 51 Haiti 44 Iran 43 Portugal 37 Nicaragua 34 Peru 31 France 29 Greece 29 Ecuador 28 Ireland 24 Hong 20 Cambodia 19 Trinadad&amp;Tobago 19 Thailand 18 Laos 18 Yugoslavia 16 Outlying-US(Guam-USVI-etc) 14 Hungary 13 Honduras 13 Scotland 12 Holand-Netherlands 1 Name: Native_country, dtype: int64 . train_df.columns . Index([&#39;Age&#39;, &#39;Workclass&#39;, &#39;fnlgwt&#39;, &#39;Education&#39;, &#39;Education_num&#39;, &#39;Marital_Status&#39;, &#39;Occupation&#39;, &#39;Relationship&#39;, &#39;Race&#39;, &#39;Sex&#39;, &#39;Capital_Gain&#39;, &#39;Capital_Loss&#39;, &#39;Hours/Week&#39;, &#39;Native_country&#39;, &#39;Income&#39;], dtype=&#39;object&#39;) . train_df[&#39;Native_country&#39;].value_counts() . United-States 29170 Mexico 643 0 583 Philippines 198 Germany 137 Canada 121 Puerto-Rico 114 El-Salvador 106 India 100 Cuba 95 England 90 Jamaica 81 South 80 China 75 Italy 73 Dominican-Republic 70 Vietnam 67 Guatemala 64 Japan 62 Poland 60 Columbia 59 Taiwan 51 Haiti 44 Iran 43 Portugal 37 Nicaragua 34 Peru 31 France 29 Greece 29 Ecuador 28 Ireland 24 Hong 20 Cambodia 19 Trinadad&amp;Tobago 19 Thailand 18 Laos 18 Yugoslavia 16 Outlying-US(Guam-USVI-etc) 14 Hungary 13 Honduras 13 Scotland 12 Holand-Netherlands 1 Name: Native_country, dtype: int64 . People from Iran are earning the most . colormap = plt.cm.magma plt.figure(figsize=(16,16)) plt.title(&#39;Pearson Correlation of Features&#39;, y=1.05, size=15) sns.heatmap(train_df.corr(),linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor=&#39;white&#39;, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fbe9e5fe080&gt; . [Bivariate][Report] Answers with perfomed bivariate analysis . Which workclass people are earning the most? Self-emp-inc | . | Which level of educated people are earning the most? Doctorates and Prof-school | . | Which martial category people are earning the most? Married-civ-spouse | . | people form which occupation category are earning the most? Exec-managerial | . | People form wich relation category are earning the most? Wife | . | Which gender people are earning the most? Men | . | Which Race of people are earning the most? Asian-Pac-Islander | . | People belongs to which Native country are earning the most? Iran | . | . Mulitvariate Analysis, pivoting . Questions: . Specific Counts of each in different workclass belongs to various education on Income basis | Specific Counts of each in different workclass belongs to various education on Gender basis | . train_mult_index = train_df.set_index(keys = [&#39;Income&#39;,&#39;Education&#39;,&#39;Native_country&#39;]).sort_index() . train_mult_index.tail() . Age Workclass fnlgwt Education_num Marital_Status Occupation Relationship Race Sex Capital_Gain Capital_Loss Hours/Week . Income Education Native_country . 1 Some-college United-States 30 | Self-emp-not-inc | 176185 | 10 | Married-spouse-absent | Craft-repair | Own-child | White | Male | 0 | 0 | 60 | . United-States 53 | Private | 304504 | 10 | Married-civ-spouse | Transport-moving | Husband | White | Male | 0 | 1887 | 45 | . United-States 46 | Private | 42251 | 10 | Married-civ-spouse | Sales | Husband | White | Male | 0 | 0 | 45 | . United-States 46 | Private | 364548 | 10 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0 | 0 | 48 | . Yugoslavia 36 | Self-emp-inc | 337778 | 10 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0 | 0 | 60 | . train_mult_index.loc[(1, &quot; Primary&quot;, &quot; United-States&quot;),].count()[0] . 202 . # People having Income &gt;50K with Primary Education in United-Sates: 202 . train_mult_index.stack().to_frame() . 0 . Income Education Native_country . 0 Assoc-acdm ? Age 42 | . Workclass Self-emp-not-inc | . fnlgwt 183765 | . Education_num 12 | . Marital_Status Married-civ-spouse | . ... ... ... ... ... | . 1 Some-college Yugoslavia Race White | . Sex Male | . Capital_Gain 0 | . Capital_Loss 0 | . Hours/Week 60 | . 390732 rows × 1 columns . #collapse-hide train_df . . Age Workclass fnlgwt Education Education_num Marital_Status Occupation Relationship Race Sex Capital_Gain Capital_Loss Hours/Week Native_country Income . 0 39 | State-gov | 77516 | Bachelors | 13 | Never-married | Adm-clerical | Not-in-family | White | Male | 2174 | 0 | 40 | United-States | 0 | . 1 50 | Self-emp-not-inc | 83311 | Bachelors | 13 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0 | 0 | 13 | United-States | 0 | . 2 38 | Private | 215646 | HS-grad | 9 | Divorced | Handlers-cleaners | Not-in-family | White | Male | 0 | 0 | 40 | United-States | 0 | . 3 53 | Private | 234721 | Primary | 7 | Married-civ-spouse | Handlers-cleaners | Husband | Black | Male | 0 | 0 | 40 | United-States | 0 | . 4 28 | Private | 338409 | Bachelors | 13 | Married-civ-spouse | Prof-specialty | Wife | Black | Female | 0 | 0 | 40 | Cuba | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 32556 27 | Private | 257302 | Assoc-acdm | 12 | Married-civ-spouse | Tech-support | Wife | White | Female | 0 | 0 | 38 | United-States | 0 | . 32557 40 | Private | 154374 | HS-grad | 9 | Married-civ-spouse | Machine-op-inspct | Husband | White | Male | 0 | 0 | 40 | United-States | 1 | . 32558 58 | Private | 151910 | HS-grad | 9 | Widowed | Adm-clerical | Unmarried | White | Female | 0 | 0 | 40 | United-States | 0 | . 32559 22 | Private | 201490 | HS-grad | 9 | Never-married | Adm-clerical | Own-child | White | Male | 0 | 0 | 20 | United-States | 0 | . 32560 52 | Self-emp-inc | 287927 | HS-grad | 9 | Married-civ-spouse | Exec-managerial | Wife | White | Female | 15024 | 0 | 40 | United-States | 1 | . 32561 rows × 15 columns . iec_data = train_df.loc[:,(&quot;Income&quot;, &quot;Education&quot;, &quot;Workclass&quot;)] . iec_data . Income Education Workclass . 0 0 | Bachelors | State-gov | . 1 0 | Bachelors | Self-emp-not-inc | . 2 0 | HS-grad | Private | . 3 0 | Primary | Private | . 4 0 | Bachelors | Private | . ... ... | ... | ... | . 32556 0 | Assoc-acdm | Private | . 32557 1 | HS-grad | Private | . 32558 0 | HS-grad | Private | . 32559 0 | HS-grad | Private | . 32560 1 | HS-grad | Self-emp-inc | . 32561 rows × 3 columns . iec_data.pivot_table(values=&#39;Income&#39;, index=&#39;Education&#39;, aggfunc=&#39;count&#39;, margins_name=&#39;Income&#39;) . Income . Education . Assoc-acdm 1067 | . Assoc-voc 1382 | . Bachelors 5355 | . Doctorate 413 | . HS-grad 10501 | . Masters 1723 | . Preschool 51 | . Primary 4202 | . Prof-school 576 | . Some-college 7291 | . iec_data[iec_data.Income == 1].pivot_table(values=&#39;Income&#39;, index=&#39;Education&#39;, aggfunc=&#39;count&#39;, margins_name=&#39;Income&#39;) . Income . Education . Assoc-acdm 265 | . Assoc-voc 361 | . Bachelors 2221 | . Doctorate 306 | . HS-grad 1675 | . Masters 959 | . Primary 244 | . Prof-school 423 | . Some-college 1387 | . #collapse-hide iec_data_pivot = iec_data[iec_data.Income == 1].pivot_table(values=&#39;Income&#39;, index=&#39;Education&#39;, aggfunc=&#39;count&#39;, margins_name=&#39;Income&#39;) plt.figure(figsize=(16, 8)) sns.heatmap(iec_data_pivot, annot=True, fmt=&#39;.1f&#39;, cbar_kws= {&#39;label&#39;:&#39;Income range in categories&#39;}, cmap=&#39;coolwarm&#39;) plt.title(&#39;Incomes of various educated categories in Income wise&#39;) . . Text(0.5, 1, &#39;Incomes of various educated categories in Income wise&#39;) . #collapse-hide train_df[train_df.Income == 1].pivot_table(values=&#39;Income&#39;, index=[&#39;Native_country&#39;, &#39;Education&#39;], aggfunc=&#39;count&#39;) . . Income . Native_country Education . 0 Assoc-acdm 3 | . Assoc-voc 4 | . Bachelors 52 | . Doctorate 15 | . HS-grad 13 | . Masters 23 | . Primary 10 | . Prof-school 9 | . Some-college 17 | . Cambodia Bachelors 2 | . HS-grad 2 | . Primary 1 | . Some-college 2 | . Canada Assoc-acdm 1 | . Assoc-voc 3 | . Bachelors 9 | . Doctorate 4 | . HS-grad 8 | . Masters 3 | . Primary 1 | . Prof-school 1 | . Some-college 9 | . China Bachelors 8 | . Doctorate 5 | . HS-grad 3 | . Masters 4 | . Columbia Doctorate 1 | . Prof-school 1 | . Cuba Bachelors 4 | . Doctorate 1 | . ... ... ... | . South Prof-school 1 | . Some-college 3 | . Taiwan Bachelors 3 | . Doctorate 7 | . HS-grad 1 | . Masters 6 | . Prof-school 3 | . Thailand Assoc-acdm 1 | . Doctorate 1 | . Some-college 1 | . Trinadad&amp;Tobago HS-grad 1 | . Primary 1 | . United-States Assoc-acdm 247 | . Assoc-voc 336 | . Bachelors 2016 | . Doctorate 249 | . HS-grad 1583 | . Masters 866 | . Primary 202 | . Prof-school 374 | . Some-college 1298 | . Vietnam Bachelors 1 | . Doctorate 1 | . HS-grad 1 | . Primary 2 | . Yugoslavia Assoc-acdm 1 | . Bachelors 2 | . HS-grad 1 | . Primary 1 | . Some-college 1 | . 191 rows × 1 columns . gen_in_df = train_df.where(train_df.Income == 1).pivot_table(values=[&#39;Income&#39;], index=&#39;Education&#39;, columns=&#39;Workclass&#39;, aggfunc=&#39;count&#39;) . #collapse-hide gen_in_df.sort_index() . . Income . Workclass ? Federal-gov Local-gov Private Self-emp-inc Self-emp-not-inc State-gov . Education . Assoc-acdm 6 | 19 | 28 | 170 | 18 | 18 | 6 | . Assoc-voc 13 | 15 | 25 | 256 | 19 | 21 | 12 | . Bachelors 45 | 95 | 162 | 1495 | 171 | 163 | 90 | . Doctorate 11 | 15 | 17 | 132 | 29 | 31 | 71 | . HS-grad 46 | 73 | 90 | 1119 | 119 | 179 | 49 | . Masters 18 | 47 | 173 | 534 | 57 | 59 | 71 | . Primary 9 | 2 | 10 | 163 | 15 | 40 | 5 | . Prof-school 8 | 23 | 19 | 171 | 78 | 106 | 18 | . Some-college 35 | 82 | 93 | 923 | 116 | 107 | 31 | . plt.figure(figsize=(16, 8)) sns.heatmap(gen_in_df.sort_index(), annot=True, fmt=&#39;.1f&#39;, cbar_kws= {&#39;label&#39;:&#39;Income range in categories&#39;}, cmap=&#39;coolwarm&#39;) plt.title(&#39;Incomes of various educated categories in Income wise&#39;) . Text(0.5, 1, &#39;Incomes of various educated categories in Income wise&#39;) . Bachelors of Education field in Private Worclass are 1495.0 Income count . gen_sex_df = train_df.where(train_df.Income == 1).pivot_table(values=[&#39;Sex&#39;], index=&#39;Education&#39;, columns=&#39;Workclass&#39;, aggfunc=&#39;count&#39;) . gen_sex_df . Sex . Workclass ? Federal-gov Local-gov Private Self-emp-inc Self-emp-not-inc State-gov . Education . Assoc-acdm 6 | 19 | 28 | 170 | 18 | 18 | 6 | . Assoc-voc 13 | 15 | 25 | 256 | 19 | 21 | 12 | . Bachelors 45 | 95 | 162 | 1495 | 171 | 163 | 90 | . Doctorate 11 | 15 | 17 | 132 | 29 | 31 | 71 | . HS-grad 46 | 73 | 90 | 1119 | 119 | 179 | 49 | . Masters 18 | 47 | 173 | 534 | 57 | 59 | 71 | . Primary 9 | 2 | 10 | 163 | 15 | 40 | 5 | . Prof-school 8 | 23 | 19 | 171 | 78 | 106 | 18 | . Some-college 35 | 82 | 93 | 923 | 116 | 107 | 31 | . #collapse-hide plt.figure(figsize=(16, 8)) sns.heatmap(gen_sex_df, annot=True, fmt=&#39;.1f&#39;, cbar_kws= {&#39;label&#39;:&#39;Income range in categories&#39;}, cmap=&#39;coolwarm&#39;) plt.title(&#39;Incomes of various educated categories in Gender wise&#39;) . . Text(0.5, 1, &#39;Incomes of various educated categories in Gender wise&#39;) . Bachelors of Education field in Private Worclass are in marjority of Gender count basis . train_df.Sex.value_counts() . Male 21790 Female 10771 Name: Sex, dtype: int64 . gen_in_df.index.names . FrozenList([&#39;Education&#39;]) . gen_in_df.loc[:,&#39;Sex&#39;] . Workclass ? Federal-gov Local-gov Private Self-emp-inc Self-emp-not-inc State-gov . Education . Assoc-acdm 6 | 19 | 28 | 170 | 18 | 18 | 6 | . Assoc-voc 13 | 15 | 25 | 256 | 19 | 21 | 12 | . Bachelors 45 | 95 | 162 | 1495 | 171 | 163 | 90 | . Doctorate 11 | 15 | 17 | 132 | 29 | 31 | 71 | . HS-grad 46 | 73 | 90 | 1119 | 119 | 179 | 49 | . Masters 18 | 47 | 173 | 534 | 57 | 59 | 71 | . Primary 9 | 2 | 10 | 163 | 15 | 40 | 5 | . Prof-school 8 | 23 | 19 | 171 | 78 | 106 | 18 | . Some-college 35 | 82 | 93 | 923 | 116 | 107 | 31 | . [Report] Multivaiate Analysis . Specific Counts of each in different workclass belongs to various education on Income basis Bachelors of Education field in Private Worclass are 1495.0 Income count | . | Specific Counts of each in different workclass belongs to various education on Gender basis Bachelors of Education field in Private Worclass are in marjority of Gender count basis | . | .",
            "url": "https://tejakummarikuntla.github.io/notes/eda/2020/04/23/EDA-US-Salary-Dataset.html",
            "relUrl": "/eda/2020/04/23/EDA-US-Salary-Dataset.html",
            "date": " • Apr 23, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Contact",
          "content": "You can find me in multiple social media platforms. . GitHub | LinkedIn | Instagram | Email | Twitter | . A few of my Writings at Blog | .",
          "url": "https://tejakummarikuntla.github.io/notes/contact/",
          "relUrl": "/contact/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tejakummarikuntla.github.io/notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}